1、IDE介绍以及C语言IDE的使用

2、C语言基本概念和使用介绍
2-1、printf和转义字符
2-2、putchar
2-3、单行注释（//）和多行注释（/* */）
2-4、#include 指令（超纲）
2-5、标签注释（标签名:）（超纲）
2-6、#pragma region 和 #pragma endregion 指令代码块注释，可折叠（VS IDE 特有，超纲）

3、基本数据类型（char, short, int, long, unsigned char, unsigned short, unsigned, unsigned long, long long, unsigned long long, _Bool, float, double, long double）
3-1、数值类类型：char, unsigned char, short, unsigned short, int, unsigned, long, unsigned long, long long, unsigned long long
3-2、浮点类型：float, double, long double
3-3、布尔类型：_Bool（C99）以及变量和布尔量的转换（实际上没有转换，只是人工理解的一种思维方式）
3-4、冷门关键字：signed
3-5、新星类型：复数 _Complex（C99）、虚数 _Imaginary（C99）
3-6、变量定义形式：变量类型 变量名，变量和只读量只能放在最开头，以及代码块（{ }）的定义
3-7、scanf 的使用
3-8、getchar 的使用
3-9、只读量定义形式：const 只读量类型 只读量名
3-10、常量定义形式：#define
3-11、只读量、变量和常量（字面量）的异同
3-12、字面量的概念和使用：普通格式、科学计数法（aE+b 或 ae+b）、八进制字面量（0 前缀）、十六进制字面量（0x 或 0X 前缀）、\xddd 和 \ddd

4、运算符机制
4-1、赋值运算符（=）和赋值的概念
4-2、基本运算符（+、-、*、/、%）
4-3、数值溢出和未定义行为（UB）的概念
4-4、位运算符（&、|、~、^、>> 和 <<）、二进制的概念
4-4 补充、原码、反码和补码的概念
4-5、复合赋值运算
4-6、逻辑运算符（&&、||、! 和 ^）
4-7、比较运算符（==、!=、>、>=、<、<=）
4-8、自增、自减运算符（前缀 ++、后缀 ++、前缀 --、后缀 --）
4-9、运算符混用造成的语义歧义及 C 语言的处理形式（优先级）：避免自增自减运算符、有趣的蝌蚪运算符（-~、~-）
4-10、sizeof 和条件运算符（?:）

5、代码书写规范（缩进等概念）
5-1、缩进：啥时候用缩进
5-2、变量名取名规范
5-3、空行的使用和空白字符的使用（双目运算符则需要插入到运算符两边，而单目运算只需要插入到运算符右侧即可）

6、四种结构（顺序结构、条件结构、循环结构和跳转结构）
6-1、顺序结构
6-2、条件结构：if 语句、if-else、if-else if-else 串联条件判断和 switch 语句以及 break 语句
6-3、循环结构：while 语句、do-while 语句和 for 语句以及 break 语句和 continue 语句
6-4、跳转结构：goto 语句和标签的概念
6-5、混用：条件结构混用（并排、嵌套）
6-5、混用：条件和循环结构混用（并排、嵌套）
6-6、混用：循环和循环混用（并排，嵌套）
6-7、算法技巧：枚举（多层循环）

7、数组
7-1、数组的概念（数组名、数组类型和数组的声明）
7-2、一维数组的概念和使用
7-3、二维数组的概念和使用
7-4、高维数组的概念和简单使用
7-5、零长数组（变长数组，VLA）的定义（C99）

8、函数
8-1、函数的概念（函数名、参数、返回值、函数的声明以及函数的调用）
8-2、无返回值函数使用
8-3、有返回值函数使用
8-4、复杂函数使用（有返回值也有参数传递）
8-5、main 函数到底是什么？
8-6、复杂的函数调用
8-7、参数修饰符（const）
8-8、局部变量修饰符（auto、static、const、register），volatile 简单介绍（超纲）
8-9、函数修饰符（static、extern）以及多文件的概念
8-10、内联函数：inline 关键字（C99）
8-11、算法技巧：递归（函数自身调用自身）和尾递归

9、指针
9-1、指针的概念（&和*运算符的使用、指针变量和变量指针、指针的内存大小）
9-2、为什么要有指针（1）：ref 参数
9-3、为什么要有指针（2）：out 参数
9-4、指针的运算（+、-、*、/、++、--）
9-5、指针的比较（==、!=、>、>=、<、<=）
9-6、指针和布尔量的转换
9-7、特殊用法：void 指针（C99）和 NULL 常量
9-8、指针类型的转换（普通变量转指针类型，或指针变量转普通类型）
9-9、函数参数修饰符：const int* p, int *const p, const int *const p 的区别、restrict 修饰符（参数地址一定不同，C99）
9-10、数组的指针（指针数组和数组指针）、数组退化传参、数组返回
9-11、字符和指针（字符串）的使用，常见库函数使用（string.h）：strlen、strcpy、strstr、strncpy、strcmp、strcat 等
9-12、函数的指针（指针函数和函数指针）
9-13、复杂数据类型声明（如 _Bool (*)(int *, int *)(*[])(const void *(*)(int, int *))）、顺时针阅读法和 typedef 关键字

10、结构体（struct 关键字）
10-1、结构体的概念（字段、内存存储机制）
10-2、堆内存和栈内存的概念简单介绍及声明和释放一个结构
10-3、结构体传参和函数返回结构体
10-4、结构体的指针和运算符（.、(*). 和 ->）
10-5、结构体的成员拓展：数组和指针类型成为字段
10-6、typedef 和结构体

11、共用体（union 关键字）
11-1、共用体的概念（字段、内存存储机制）
11-2、这下可以解释为什么结构体类型必须带有struct关键字才行了
11-3、共用体变量和结构体的对比
11-4、typedef 和共用体

12、枚举体（enum 关键字）
12-1、枚举：高配版整数——可以自己取名的普通整数
12-2、枚举的声明和使用
12-3、枚举和结构、共用的异同
12-4、typedef 和枚举体

13、位域
13-1、位域的概念
13-2、位域的用法
13-3、typedef 和位域

14、堆内存和栈内存
14-1、基本概念复习（前面讲过了）
14-2、_Alignof 和 _Alignas 关键字以及内存对齐的概念
14-3、查看内存大小：sizeof 关键字（两种使用方式 sizeof p 和 sizeof(p)）
14-4、函数调用协定：__cdecl、__stdcall、_cdecl、_stdcall 关键字以及调用方式原理介绍

15、文件
15-1、文件的概念和文件指针
15-2、常见文件使用和调用函数 fseek、fprintf 等

16、泛型
16-1、泛型是什么
16-2、_Generic 关键字

17、预处理指令
17-1、条件编译符号的定义（#define SYMBOL）和宏替换定义（#define VARIABLE 数值）和取消定义（#endef）
17-2、条件编译符号的判断（#if、#elif、#else、#endif）
17-3、条件编译符号判断（#ifdef、#if defined、#ifndef）
17-4、头文件导入（#include）
17-5、文件行数指定（#line）
17-6、警告和错误信息自定义（#warning、#error）
17-7、杂注（#pragma）：#pragma warning (disable: 编译警告编号; once: 编译警告编号; error: 编译警告编号)、#pragma once（避免文件多次编译）、#pragma hdrstop（编译到头文件就退出）、#pragma resource（自定义文件项目导入）等
17-8、_Pragma 关键字和 #pragma 的异同（C99）

18、程序中断控制
18-1、_Exit 和 exit 函数
18-2、断言的概念和 _Static_assert 关键字（C11）
18-3、_Noreturn 关键字（C11）

19、多线程入门
19-1、多线程概念和基本使用（threads.h 头文件）
19-2、volatile 关键字
19-3、_Thread_local 关键字（C11）
19-4、_Atomic 关键字（C11）

20、其他
20-1、内联汇编关键字 __asm__
20-2、内联 fortran 关键字 __fortran__
20-3、三字符转义序列（照顾底层系统无法打出一些符号的人使用）

内容没有包含全部，因为有一些内容（dll 导出等等）不是 C 语言教程该讲的。